{"title":"BCB 520 - Midterm Portfolio Post","markdown":{"yaml":{"title":"BCB 520 - Midterm Portfolio Post","subtitle":"State Level Infection Dynamics of the Zombie Apocalypse","format":{"html":{"toc":false,"echo":true}},"author":"Barrie Robison","date":"2023-04-04","categories":["Portfolio","DataViz","Infectious Disease","Observable","Animation"],"image":"Zomsimmesh.png","description":"Animating the dynamics of zombie spatial disease ecology.","code-fold":true,"code-tools":true,"draft":true},"headingText":"PREAMBLE","containsRefs":false,"markdown":"\n\n\n```{r}\n#| output: false\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\n```\n\n[ZOMBIES.]{.red}\n\nZombies have long been a frequent trope of horror fiction. The concept of zombies first emerged from Haitian folklore and Voodoo, where they were depicted as reanimated corpses that were controlled by a sorcerer or bokor. However, in modern fiction, the magical or supernatural origin of zombies has been largely replaced by a scientific one. Zombies are now typically portrayed as mindless, flesh-eating creatures that are reanimated by a virus or some other infectious agent.\n\nThe evolution of zombies as a horror trope can be divided into several distinct eras:\n\n1.  **Classic Zombies:** The classic zombie was the original Haitian zombie, which was introduced to Western audiences in the early 20th century through literature and film. These zombies were depicted as slow-moving, mind-controlled creatures that were raised from the dead by Voodoo magic.\n\n2.  **Romero Zombies:** George A. Romero's 1968 film [\"Night of the Living Dead\"](https://www.imdb.com/title/tt0063350/?ref_=nm_knf_t_3) redefined the zombie genre by introducing the idea that zombies were reanimated by a mysterious virus that spread through bites and scratches. Romero's zombies were slow-moving, flesh-eating creatures that could only be killed by destroying the brain. Many modern zombie franchises (e.g. [Resident Evi](https://www.imdb.com/title/tt0120804/?ref_=fn_al_tt_1), [Walking Dead](https://www.imdb.com/title/tt1520211/?ref_=nv_sr_srsg_0)) still use the classic shambling undead Romeero Zombie concept.\n\n3.  **Fast Zombies:** In the early 2000s, a new type of zombie emerged in fiction that could run and move at incredible speeds. These fast zombies were popularized by films like [28 Days Later](https://www.imdb.com/title/tt0289043/?ref_=nv_sr_srsg_0) and [World War Z](https://www.imdb.com/title/tt0816711/?ref_=nv_sr_srsg_0). Fast zombies are often depicted as being more aggressive and intelligent than their slow-moving counterparts. Note that in many of these zombie franchises, the zombies were still created by an infectious agent such as a virus.\n\n4.  **Post-Apocalyptic Zombies:** In recent years, zombies have been featured in a number of post-apocalyptic settings, where they are often portrayed as the cause of a global pandemic that has devastated humanity. These stories often focus on the struggle of survivors to rebuild civilization in a world overrun by the undead. These can be any of the above types (Classic, Romero, Fast) of zombie. This is the scenario that motivates this Blog post.\n\n**Would an outbreak of a \"zombie virus\" actually consume the world and bring forth an apocalyptic new age of shambling horror?**\n\nLet's use disease modeling to find out!\n\n## Data\n\nI'm going to use our new interactive simulation, [OUTBREAK SIMULATOR](https://professorpolymorphic.github.io/PolymorphicWeb/Games/OutbreakSimulator/), to understand the dynamics of a zombie virus outbreak.\n\n### Parameters\n\nIn order to model this outbreak, we'll need to set some of the classic parameters of an SIR compartment model. Outbreak Simulator uses a compartment model of disease (Weissman et al., 2020) in which the population is divided into categories (Figure 1): Susceptible (S), Exposed (E), Infected (I), Vaccinated (V), Recovered (R), or Deceased (D). The model estimates the rates of exchange between categories over a given time interval (t) using differential equations. When the model parameters are known and key assumptions are met, the differential equations can estimate the epidemic curve of an outbreak. The two most critical assumptions are that the population is homogeneous and well mixed and is fixed in size.\n\n![](OSFig1.jpg)\n\nI've provided my own estimates of these parameters for various infectious zombie franchises in the table below.\n\n```{r}\n\nparams<-read_xlsx(\"params.xlsx\")\n\nknitr::kable(params)\n\n```\n\n### Data Dictionary\n\nOutbreak Simulator runs the compartment model on a spatially explicit grid of the continental US. It writes the number of individuals in each compartment (SIERD) at each time step (an hour) for each of the 48 states and the total population.\n\nThis is a video of the simulation:\n\n![](zombievid_1.mp4)\n\n```{r}\ndf<-read.csv(\"ZombieData.csv\")\n\n\n```\n\nI'll manipulate the raw data a bit to get to the visualizations I need. First, I want a tidy data set with only the total US population.\n\n```{r}\n\ndf<-df%>%\n  mutate_at(c(1:295), as.numeric)\n\ndftotal <- df%>%\n  select(Time, starts_with(\"Totals_\"))%>%\n  rename(Time=Time,\n          S=Totals_S,\n         E=Totals_E,\n         V=Totals_V,\n         I=Totals_I,\n         R=Totals_R,\n         D=Totals_D)\n\nfor (i in 1:length(dftotal$Time)){\n  \n  dftotal$dS[i] <- dftotal$S[i]-dftotal$S[i+1]\n  dftotal$dR[i] <- dftotal$R[i+1]-dftotal$R[i]\n  dftotal$dI[i] <- dftotal$I[i+1]-dftotal$I[i]\n  dftotal$dD[i] <- dftotal$D[i+1]-dftotal$D[i]\n\n}\n\ndftotal<- dftotal%>%\n  mutate(N= S+E+I+V+R+D)%>%\n  mutate(Beta = dS*N/(S*I+1))%>%\n  mutate(Gamma = dD/(I+1))%>%\n  mutate(R0 = Beta/Gamma)%>%\n  filter(Beta<10)%>%\n  filter(R0<10^3)\n\ndflong<-dftotal%>%\n  pivot_longer(cols = c(\"S\", \"E\", \"I\",\n                        \"V\", \"R\", \"D\"),names_to = \"Compartment\", values_to = \"Count\")\n\ndflong <- dflong%>%\n  mutate(Compartment = recode(Compartment, \n         S = \"Susceptible\",\n         E = \"Exposed\",\n         I = \"Infected\",\n         V = \"Vaccinated\",\n         R = \"Recovered\",\n         D = \"Deceased\"))%>%\n  filter(Compartment != \"Vaccinated\")%>%\n  filter(Compartment != \"Recovered\")\n\n```\n\nThis allows me to produce the classic Epidemilogical Curve:\n\n```{r}\n\nggplot(dflong, aes(x=Time, y = Count/10^6, color = Compartment))+\n  geom_line()+\n   labs(\n    title = \"Epidemiological Curve\",\n    subtitle = \"Resident Evil - T Virus\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 1\",\n    x = \"Time (h)\",\n    y = \"Number of Individuals (millions)\",\n    colour = \"Compartment\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")\n\n\n```\n\n## STATE LEVEL DYNAMICS\n\nWe can use the output from the simulation to show the Epidemilogical Curve for each state, but the problem is the number of states. There are 48 in the continental US - too many to ask a user to meaningfully process.\n\nHere are the curves for four states - the ones that collaborate on the [Tickbase project](https://tickbase.net) that funds this work.\n\n```{r}\n\n\n\nstateslong <- df %>%\n  pivot_longer(cols = 2:295,\n               names_to = c(\"State\", \"Compartment\"),\n  names_pattern = \"(.+?)_(.)\",\n  values_to = \"Count\")\n\nfewerstates<-stateslong%>%\n  filter(State == \"New.Mexico\" | State == \"Idaho\"\n         | State ==\"Nevada\" | State == \"New.Hampshire\"\n         )%>%\n    mutate(Compartment = recode(Compartment, \n         S = \"Susceptible\",\n         E = \"Exposed\",\n         I = \"Infected\",\n         V = \"Vaccinated\",\n         R = \"Recovered\",\n         D = \"Deceased\"))%>%\n  filter(Compartment != \"Vaccinated\")%>%\n  filter(Compartment != \"Recovered\")\n\n\nggplot(fewerstates, aes(x=Time, y = Count/10^6, color = Compartment))+\n  geom_line()+\n  facet_wrap(~State)+\n   labs(\n    title = \"Epidemiological Curve\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 2\",\n    x = \"Time (h)\",\n    y = \"Number of Individuals (millions)\",\n    colour = \"Compartment\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")\n\nstatecolor<-stateslong%>%\n  filter(Compartment == \"S\" & State != \"Totals\" & Time == 0)%>%\n  mutate(rank = rank(Count))\n\nstateslong2 <- left_join(stateslong, statecolor, by = c(\"State\",\n                                                        \"Compartment\"))\n\nZomstates <- stateslong2 %>%\n  filter(Compartment == \"S\" & State != \"Totals\")%>%\n  mutate(date = as_date(Time.x),\n         name = State,\n         category = rank,\n         value = Count.x)%>%\n  select(c(8:11))\n\n\n\n\n\nwrite.csv(Zomstates, \"Zomstates.csv\")\n\n```\n\n## VISUALIZATIONS\n\nI'm really interested in an animated visualization that captures the changing population dynamics in each state. I'm going to use Observable for this, modifying an [existing workbook](https://observablehq.com/d/c28318bc4edfb4c1).\n\n```{ojs}\n\ndata = d3.csvParse(await FileAttachment(\"Zomstates.csv\").text(), d3.autoType)\n\nviewof replay = html`<button>Replay`\n\n```\n\n```{ojs}\n\n\n\nchart = {\n  \n  replay;\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n  const updateBars = bars(svg);\n  const updateAxis = axis(svg);\n  const updateLabels = labels(svg);\n  const updateTicker = ticker(svg);\n\n  yield svg.node();\n\n  for (const keyframe of keyframes) {\n    const transition = svg.transition()\n        .duration(duration)\n        .ease(d3.easeLinear);\n\n    // Extract the top barâ€™s value.\n    x.domain([0, keyframe[1][0].value]);\n\n    updateAxis(keyframe, transition);\n    updateBars(keyframe, transition);\n    updateLabels(keyframe, transition);\n    updateTicker(keyframe, transition);\n\n    invalidation.then(() => svg.interrupt());\n    await transition.end();\n  }\n}\n\n\nduration = 25\nn = 50\nk = 10\nnames = new Set(data.map(d => d.name))\n\n\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\n  .map(([date, data]) => [new Date(date), data])\n  .sort(([a], [b]) => d3.ascending(a, b))\n  \n  \nfunction rank(value) {\n  const data = Array.from(names, name => ({name, value: value(name)}));\n  data.sort((a, b) => d3.descending(a.value, b.value));\n  for (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\n  return data;\n}\n\nkeyframes = {\n  const keyframes = [];\n  let ka, a, kb, b;\n  for ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\n    for (let i = 0; i < k; ++i) {\n      const t = i / k;\n      keyframes.push([\n        new Date(ka * (1 - t) + kb * t),\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\n      ]);\n    }\n  }\n  keyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\n  return keyframes;\n}\n\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\n\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\n\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\n\nfunction bars(svg) {\n  let bar = svg.append(\"g\")\n      .attr(\"fill-opacity\", 0.6)\n    .selectAll(\"rect\");\n\n  return ([date, data], transition) => bar = bar\n    .data(data.slice(0, n), d => d.name)\n    .join(\n      enter => enter.append(\"rect\")\n        .attr(\"fill\", color)\n        .attr(\"height\", y.bandwidth())\n        .attr(\"x\", x(0))\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\n      update => update,\n      exit => exit.transition(transition).remove()\n        .attr(\"y\", d => y((next.get(d) || d).rank))\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\n    )\n    .call(bar => bar.transition(transition)\n      .attr(\"y\", d => y(d.rank))\n      .attr(\"width\", d => x(d.value) - x(0)));\n}\n\n\nfunction labels(svg) {\n  let label = svg.append(\"g\")\n      .style(\"font\", \"bold 12px var(--sans-serif)\")\n      .style(\"font-variant-numeric\", \"tabular-nums\")\n      .attr(\"text-anchor\", \"end\")\n    .selectAll(\"text\");\n\n  return ([date, data], transition) => label = label\n    .data(data.slice(0, n), d => d.name)\n    .join(\n      enter => enter.append(\"text\")\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\n        .attr(\"y\", y.bandwidth() / 2)\n        .attr(\"x\", -6)\n        .attr(\"dy\", \"-0.25em\")\n        .text(d => d.name)\n        .call(text => text.append(\"tspan\")\n          .attr(\"fill-opacity\", 0.7)\n          .attr(\"font-weight\", \"normal\")\n          .attr(\"x\", -6)\n          .attr(\"dy\", \"1.15em\")),\n      update => update,\n      exit => exit.transition(transition).remove()\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\n    )\n    .call(bar => bar.transition(transition)\n      .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\n      .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))))\n}\n\nfunction textTween(a, b) {\n  const i = d3.interpolateNumber(a, b);\n  return function(t) {\n    this.textContent = formatNumber(i(t));\n  };\n}\n\nformatNumber = d3.format(\",d\")\n\nfunction axis(svg) {\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`);\n\n  const axis = d3.axisTop(x)\n      .ticks(width / 160)\n      .tickSizeOuter(0)\n      .tickSizeInner(-barSize * (n + y.padding()));\n\n  return (_, transition) => {\n    g.transition(transition).call(axis);\n    g.select(\".tick:first-of-type text\").remove();\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\n    g.select(\".domain\").remove();\n  };\n}\n\nfunction ticker(svg) {\n  const now = svg.append(\"text\")\n      .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\n      .style(\"font-variant-numeric\", \"tabular-nums\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", width - 6)\n      .attr(\"y\", margin.top + barSize * (n - 0.45))\n      .attr(\"dy\", \"0.32em\")\n      .text(formatDate(keyframes[0][0]));\n\n  return ([date], transition) => {\n    transition.end().then(() => now.text(formatDate(date)));\n  };\n}\n\nformatDate = d3.utcFormat(\"%Y\")\n\ncolor = {\n  const scale = d3.scaleSequential(d3.interpolate(\"red\", \"blue\")).domain([1, 48]);\n  if (data.some(d => d.category !== undefined)) {\n    const categoryByName = new Map(data.map(d => [d.name, d.category]))\n    scale.domain(Array.from(categoryByName.values()));\n    return d => scale(categoryByName.get(d.name));\n  }\n  return d => scale(d.name);\n}\n\n\n<!-- color = { -->\n<!--   const scale = d3.scaleSequential(d3.interpolate(\"red\", \"blue\")).domain([1, 48]); -->\n<!--   if (data.some(d => d.category !== undefined)) { -->\n<!--     const categoryByName = new Map(data.map(d => [d.name, d.category])); -->\n<!--     const categories = Array.from(categoryByName.values()).filter((d, i, arr) => arr.indexOf(d) === i); -->\n<!--     const scaleByCategory = typeof categories[0] === \"number\" ?  -->\n<!--       d3.scaleSequential(d3.interpolateSpectral).domain(d3.extent(categories)) : -->\n<!--       d3.scaleOrdinal().domain(categories).range(d3.quantize(d3.interpolateSpectral, categories.length)); -->\n<!--     return d => scale(scaleByCategory(categoryByName.get(d.name))); -->\n<!--   } -->\n<!--   return (d, i) => scale(i); -->\n<!-- } -->\n\nx = d3.scaleLinear([0, 1], [margin.left, width - margin.right])\n\ny = d3.scaleBand()\n    .domain(d3.range(n + 1))\n    .rangeRound([margin.top, margin.top + barSize * (n + 1 + 0.1)])\n    .padding(0.1)\n    \nheight = margin.top + barSize * n + margin.bottom\n\nbarSize = 48\n\nmargin = ({top: 16, right: 6, bottom: 6, left: 0})\n\nd3 = require(\"d3@6\")\n\n\n\n```\n\n## SUMMARY\n\nIt is pretty clear from the simulations that an outbreak of the T-Virus is really bad news for the continental United States. We go from \\~308 million people to \\~10 million people in about 500 hours. In addition, the most populated states at the beginning of the outbreak are hit disproportionately hard, presumably because their population density helps sustain the infection.\n","srcMarkdownNoYaml":"\n\n## PREAMBLE\n\n```{r}\n#| output: false\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\n```\n\n[ZOMBIES.]{.red}\n\nZombies have long been a frequent trope of horror fiction. The concept of zombies first emerged from Haitian folklore and Voodoo, where they were depicted as reanimated corpses that were controlled by a sorcerer or bokor. However, in modern fiction, the magical or supernatural origin of zombies has been largely replaced by a scientific one. Zombies are now typically portrayed as mindless, flesh-eating creatures that are reanimated by a virus or some other infectious agent.\n\nThe evolution of zombies as a horror trope can be divided into several distinct eras:\n\n1.  **Classic Zombies:** The classic zombie was the original Haitian zombie, which was introduced to Western audiences in the early 20th century through literature and film. These zombies were depicted as slow-moving, mind-controlled creatures that were raised from the dead by Voodoo magic.\n\n2.  **Romero Zombies:** George A. Romero's 1968 film [\"Night of the Living Dead\"](https://www.imdb.com/title/tt0063350/?ref_=nm_knf_t_3) redefined the zombie genre by introducing the idea that zombies were reanimated by a mysterious virus that spread through bites and scratches. Romero's zombies were slow-moving, flesh-eating creatures that could only be killed by destroying the brain. Many modern zombie franchises (e.g. [Resident Evi](https://www.imdb.com/title/tt0120804/?ref_=fn_al_tt_1), [Walking Dead](https://www.imdb.com/title/tt1520211/?ref_=nv_sr_srsg_0)) still use the classic shambling undead Romeero Zombie concept.\n\n3.  **Fast Zombies:** In the early 2000s, a new type of zombie emerged in fiction that could run and move at incredible speeds. These fast zombies were popularized by films like [28 Days Later](https://www.imdb.com/title/tt0289043/?ref_=nv_sr_srsg_0) and [World War Z](https://www.imdb.com/title/tt0816711/?ref_=nv_sr_srsg_0). Fast zombies are often depicted as being more aggressive and intelligent than their slow-moving counterparts. Note that in many of these zombie franchises, the zombies were still created by an infectious agent such as a virus.\n\n4.  **Post-Apocalyptic Zombies:** In recent years, zombies have been featured in a number of post-apocalyptic settings, where they are often portrayed as the cause of a global pandemic that has devastated humanity. These stories often focus on the struggle of survivors to rebuild civilization in a world overrun by the undead. These can be any of the above types (Classic, Romero, Fast) of zombie. This is the scenario that motivates this Blog post.\n\n**Would an outbreak of a \"zombie virus\" actually consume the world and bring forth an apocalyptic new age of shambling horror?**\n\nLet's use disease modeling to find out!\n\n## Data\n\nI'm going to use our new interactive simulation, [OUTBREAK SIMULATOR](https://professorpolymorphic.github.io/PolymorphicWeb/Games/OutbreakSimulator/), to understand the dynamics of a zombie virus outbreak.\n\n### Parameters\n\nIn order to model this outbreak, we'll need to set some of the classic parameters of an SIR compartment model. Outbreak Simulator uses a compartment model of disease (Weissman et al., 2020) in which the population is divided into categories (Figure 1): Susceptible (S), Exposed (E), Infected (I), Vaccinated (V), Recovered (R), or Deceased (D). The model estimates the rates of exchange between categories over a given time interval (t) using differential equations. When the model parameters are known and key assumptions are met, the differential equations can estimate the epidemic curve of an outbreak. The two most critical assumptions are that the population is homogeneous and well mixed and is fixed in size.\n\n![](OSFig1.jpg)\n\nI've provided my own estimates of these parameters for various infectious zombie franchises in the table below.\n\n```{r}\n\nparams<-read_xlsx(\"params.xlsx\")\n\nknitr::kable(params)\n\n```\n\n### Data Dictionary\n\nOutbreak Simulator runs the compartment model on a spatially explicit grid of the continental US. It writes the number of individuals in each compartment (SIERD) at each time step (an hour) for each of the 48 states and the total population.\n\nThis is a video of the simulation:\n\n![](zombievid_1.mp4)\n\n```{r}\ndf<-read.csv(\"ZombieData.csv\")\n\n\n```\n\nI'll manipulate the raw data a bit to get to the visualizations I need. First, I want a tidy data set with only the total US population.\n\n```{r}\n\ndf<-df%>%\n  mutate_at(c(1:295), as.numeric)\n\ndftotal <- df%>%\n  select(Time, starts_with(\"Totals_\"))%>%\n  rename(Time=Time,\n          S=Totals_S,\n         E=Totals_E,\n         V=Totals_V,\n         I=Totals_I,\n         R=Totals_R,\n         D=Totals_D)\n\nfor (i in 1:length(dftotal$Time)){\n  \n  dftotal$dS[i] <- dftotal$S[i]-dftotal$S[i+1]\n  dftotal$dR[i] <- dftotal$R[i+1]-dftotal$R[i]\n  dftotal$dI[i] <- dftotal$I[i+1]-dftotal$I[i]\n  dftotal$dD[i] <- dftotal$D[i+1]-dftotal$D[i]\n\n}\n\ndftotal<- dftotal%>%\n  mutate(N= S+E+I+V+R+D)%>%\n  mutate(Beta = dS*N/(S*I+1))%>%\n  mutate(Gamma = dD/(I+1))%>%\n  mutate(R0 = Beta/Gamma)%>%\n  filter(Beta<10)%>%\n  filter(R0<10^3)\n\ndflong<-dftotal%>%\n  pivot_longer(cols = c(\"S\", \"E\", \"I\",\n                        \"V\", \"R\", \"D\"),names_to = \"Compartment\", values_to = \"Count\")\n\ndflong <- dflong%>%\n  mutate(Compartment = recode(Compartment, \n         S = \"Susceptible\",\n         E = \"Exposed\",\n         I = \"Infected\",\n         V = \"Vaccinated\",\n         R = \"Recovered\",\n         D = \"Deceased\"))%>%\n  filter(Compartment != \"Vaccinated\")%>%\n  filter(Compartment != \"Recovered\")\n\n```\n\nThis allows me to produce the classic Epidemilogical Curve:\n\n```{r}\n\nggplot(dflong, aes(x=Time, y = Count/10^6, color = Compartment))+\n  geom_line()+\n   labs(\n    title = \"Epidemiological Curve\",\n    subtitle = \"Resident Evil - T Virus\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 1\",\n    x = \"Time (h)\",\n    y = \"Number of Individuals (millions)\",\n    colour = \"Compartment\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")\n\n\n```\n\n## STATE LEVEL DYNAMICS\n\nWe can use the output from the simulation to show the Epidemilogical Curve for each state, but the problem is the number of states. There are 48 in the continental US - too many to ask a user to meaningfully process.\n\nHere are the curves for four states - the ones that collaborate on the [Tickbase project](https://tickbase.net) that funds this work.\n\n```{r}\n\n\n\nstateslong <- df %>%\n  pivot_longer(cols = 2:295,\n               names_to = c(\"State\", \"Compartment\"),\n  names_pattern = \"(.+?)_(.)\",\n  values_to = \"Count\")\n\nfewerstates<-stateslong%>%\n  filter(State == \"New.Mexico\" | State == \"Idaho\"\n         | State ==\"Nevada\" | State == \"New.Hampshire\"\n         )%>%\n    mutate(Compartment = recode(Compartment, \n         S = \"Susceptible\",\n         E = \"Exposed\",\n         I = \"Infected\",\n         V = \"Vaccinated\",\n         R = \"Recovered\",\n         D = \"Deceased\"))%>%\n  filter(Compartment != \"Vaccinated\")%>%\n  filter(Compartment != \"Recovered\")\n\n\nggplot(fewerstates, aes(x=Time, y = Count/10^6, color = Compartment))+\n  geom_line()+\n  facet_wrap(~State)+\n   labs(\n    title = \"Epidemiological Curve\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 2\",\n    x = \"Time (h)\",\n    y = \"Number of Individuals (millions)\",\n    colour = \"Compartment\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")\n\nstatecolor<-stateslong%>%\n  filter(Compartment == \"S\" & State != \"Totals\" & Time == 0)%>%\n  mutate(rank = rank(Count))\n\nstateslong2 <- left_join(stateslong, statecolor, by = c(\"State\",\n                                                        \"Compartment\"))\n\nZomstates <- stateslong2 %>%\n  filter(Compartment == \"S\" & State != \"Totals\")%>%\n  mutate(date = as_date(Time.x),\n         name = State,\n         category = rank,\n         value = Count.x)%>%\n  select(c(8:11))\n\n\n\n\n\nwrite.csv(Zomstates, \"Zomstates.csv\")\n\n```\n\n## VISUALIZATIONS\n\nI'm really interested in an animated visualization that captures the changing population dynamics in each state. I'm going to use Observable for this, modifying an [existing workbook](https://observablehq.com/d/c28318bc4edfb4c1).\n\n```{ojs}\n\ndata = d3.csvParse(await FileAttachment(\"Zomstates.csv\").text(), d3.autoType)\n\nviewof replay = html`<button>Replay`\n\n```\n\n```{ojs}\n\n\n\nchart = {\n  \n  replay;\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n  const updateBars = bars(svg);\n  const updateAxis = axis(svg);\n  const updateLabels = labels(svg);\n  const updateTicker = ticker(svg);\n\n  yield svg.node();\n\n  for (const keyframe of keyframes) {\n    const transition = svg.transition()\n        .duration(duration)\n        .ease(d3.easeLinear);\n\n    // Extract the top barâ€™s value.\n    x.domain([0, keyframe[1][0].value]);\n\n    updateAxis(keyframe, transition);\n    updateBars(keyframe, transition);\n    updateLabels(keyframe, transition);\n    updateTicker(keyframe, transition);\n\n    invalidation.then(() => svg.interrupt());\n    await transition.end();\n  }\n}\n\n\nduration = 25\nn = 50\nk = 10\nnames = new Set(data.map(d => d.name))\n\n\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\n  .map(([date, data]) => [new Date(date), data])\n  .sort(([a], [b]) => d3.ascending(a, b))\n  \n  \nfunction rank(value) {\n  const data = Array.from(names, name => ({name, value: value(name)}));\n  data.sort((a, b) => d3.descending(a.value, b.value));\n  for (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\n  return data;\n}\n\nkeyframes = {\n  const keyframes = [];\n  let ka, a, kb, b;\n  for ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\n    for (let i = 0; i < k; ++i) {\n      const t = i / k;\n      keyframes.push([\n        new Date(ka * (1 - t) + kb * t),\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\n      ]);\n    }\n  }\n  keyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\n  return keyframes;\n}\n\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\n\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\n\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\n\nfunction bars(svg) {\n  let bar = svg.append(\"g\")\n      .attr(\"fill-opacity\", 0.6)\n    .selectAll(\"rect\");\n\n  return ([date, data], transition) => bar = bar\n    .data(data.slice(0, n), d => d.name)\n    .join(\n      enter => enter.append(\"rect\")\n        .attr(\"fill\", color)\n        .attr(\"height\", y.bandwidth())\n        .attr(\"x\", x(0))\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\n      update => update,\n      exit => exit.transition(transition).remove()\n        .attr(\"y\", d => y((next.get(d) || d).rank))\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\n    )\n    .call(bar => bar.transition(transition)\n      .attr(\"y\", d => y(d.rank))\n      .attr(\"width\", d => x(d.value) - x(0)));\n}\n\n\nfunction labels(svg) {\n  let label = svg.append(\"g\")\n      .style(\"font\", \"bold 12px var(--sans-serif)\")\n      .style(\"font-variant-numeric\", \"tabular-nums\")\n      .attr(\"text-anchor\", \"end\")\n    .selectAll(\"text\");\n\n  return ([date, data], transition) => label = label\n    .data(data.slice(0, n), d => d.name)\n    .join(\n      enter => enter.append(\"text\")\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\n        .attr(\"y\", y.bandwidth() / 2)\n        .attr(\"x\", -6)\n        .attr(\"dy\", \"-0.25em\")\n        .text(d => d.name)\n        .call(text => text.append(\"tspan\")\n          .attr(\"fill-opacity\", 0.7)\n          .attr(\"font-weight\", \"normal\")\n          .attr(\"x\", -6)\n          .attr(\"dy\", \"1.15em\")),\n      update => update,\n      exit => exit.transition(transition).remove()\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\n    )\n    .call(bar => bar.transition(transition)\n      .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\n      .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))))\n}\n\nfunction textTween(a, b) {\n  const i = d3.interpolateNumber(a, b);\n  return function(t) {\n    this.textContent = formatNumber(i(t));\n  };\n}\n\nformatNumber = d3.format(\",d\")\n\nfunction axis(svg) {\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`);\n\n  const axis = d3.axisTop(x)\n      .ticks(width / 160)\n      .tickSizeOuter(0)\n      .tickSizeInner(-barSize * (n + y.padding()));\n\n  return (_, transition) => {\n    g.transition(transition).call(axis);\n    g.select(\".tick:first-of-type text\").remove();\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\n    g.select(\".domain\").remove();\n  };\n}\n\nfunction ticker(svg) {\n  const now = svg.append(\"text\")\n      .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\n      .style(\"font-variant-numeric\", \"tabular-nums\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", width - 6)\n      .attr(\"y\", margin.top + barSize * (n - 0.45))\n      .attr(\"dy\", \"0.32em\")\n      .text(formatDate(keyframes[0][0]));\n\n  return ([date], transition) => {\n    transition.end().then(() => now.text(formatDate(date)));\n  };\n}\n\nformatDate = d3.utcFormat(\"%Y\")\n\ncolor = {\n  const scale = d3.scaleSequential(d3.interpolate(\"red\", \"blue\")).domain([1, 48]);\n  if (data.some(d => d.category !== undefined)) {\n    const categoryByName = new Map(data.map(d => [d.name, d.category]))\n    scale.domain(Array.from(categoryByName.values()));\n    return d => scale(categoryByName.get(d.name));\n  }\n  return d => scale(d.name);\n}\n\n\n<!-- color = { -->\n<!--   const scale = d3.scaleSequential(d3.interpolate(\"red\", \"blue\")).domain([1, 48]); -->\n<!--   if (data.some(d => d.category !== undefined)) { -->\n<!--     const categoryByName = new Map(data.map(d => [d.name, d.category])); -->\n<!--     const categories = Array.from(categoryByName.values()).filter((d, i, arr) => arr.indexOf(d) === i); -->\n<!--     const scaleByCategory = typeof categories[0] === \"number\" ?  -->\n<!--       d3.scaleSequential(d3.interpolateSpectral).domain(d3.extent(categories)) : -->\n<!--       d3.scaleOrdinal().domain(categories).range(d3.quantize(d3.interpolateSpectral, categories.length)); -->\n<!--     return d => scale(scaleByCategory(categoryByName.get(d.name))); -->\n<!--   } -->\n<!--   return (d, i) => scale(i); -->\n<!-- } -->\n\nx = d3.scaleLinear([0, 1], [margin.left, width - margin.right])\n\ny = d3.scaleBand()\n    .domain(d3.range(n + 1))\n    .rangeRound([margin.top, margin.top + barSize * (n + 1 + 0.1)])\n    .padding(0.1)\n    \nheight = margin.top + barSize * n + margin.bottom\n\nbarSize = 48\n\nmargin = ({top: 16, right: 6, bottom: 6, left: 0})\n\nd3 = require(\"d3@6\")\n\n\n\n```\n\n## SUMMARY\n\nIt is pretty clear from the simulations that an outbreak of the T-Virus is really bad news for the continental United States. We go from \\~308 million people to \\~10 million people in about 500 hours. In addition, the most populated states at the beginning of the outbreak are hit disproportionately hard, presumably because their population density helps sustain the infection.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"spacelab","title-block-banner":true,"title":"BCB 520 - Midterm Portfolio Post","subtitle":"State Level Infection Dynamics of the Zombie Apocalypse","author":"Barrie Robison","date":"2023-04-04","categories":["Portfolio","DataViz","Infectious Disease","Observable","Animation"],"image":"Zomsimmesh.png","description":"Animating the dynamics of zombie spatial disease ecology.","draft":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}