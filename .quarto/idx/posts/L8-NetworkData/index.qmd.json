{"title":"LECTURE 8 - Network Data","markdown":{"yaml":{"title":"LECTURE 8 - Network Data","format":{"revealjs":{"slide-number":true,"chalkboard":{"buttons":false},"preview-links":"auto","css":"styles.css","footer":"<a href=\"https://canvas.uidaho.edu/courses/17806\" target=\"_blank\">CANVAS</a>...<a href=\"https://professorpolymorphic.github.io/RobisonWebSite/BCB520/BCB520.html\" target=\"_blank\">HOME</a>","theme":["default","custom.scss"]}},"author":"Barrie Robison","date":"2023-04-17","categories":["Lecture","DataViz","Data","Network","Observable"],"image":"Azathothnetwork.png","code-fold":true,"draft":true},"headingText":"DATASET TYPES: NETWORKS","containsRefs":false,"markdown":"\n\n\n\n::: columns\n::: {.r-fit-text .column width=\"40%\"}\n-   networks (also called graphs)\n    -   model relationships between things\n    -   two kinds of items, both can have attributes\n        -   nodes\n        -   links\n-   trees are a special case\n    -   no cycles\n    -   one parent per node\n\n:::\n\n::: {.column width=\"60%\"}\n![](Networks.png)\n:::\n:::\n## ARRANGE NETWORKS/TREES\n\n![](Arrangenet.png)\n\n\n## NETWORK TASKS\n\n::: columns\n::: {.r-fit-text .column width=\"60%\"}\n-   topology based tasks\n    -   find paths\n    -   find (topological) neighbors\n    -   compare centrality/importance measures\n    -   identify clusters / communities\n-   attribute based tasks (similar to tabular data)\n    -   find distributions, etc...\n-   combination tasks, incorporating both\n    -   example: find friends-of-friends who like cats \n        -   topology: find all adjacent nodes of given node\n        -   attributes: check if has-pet (node attribute) == cat\n\n\n:::\n\n::: {.column width=\"40%\"}\n![](Nettasks.png)\n:::\n:::\n\n## NODE-LINK DIAGRAMS\n\n::: columns\n::: {.r-fit-text .column width=\"40%\"}\n-   nodes: point marks\n-   links: line marks\n    -   straight lines or arcs\n    -   connections between nodes\n-   intuitive & familiar\n    -   most common\n    -   many, many variants\n\n\n:::\n\n::: {.column width=\"60%\"}\n![](nodelink.png)\n:::\n:::\n\n## NODE-LINK LAYOUT {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-   minimize \n    -   edge crossings, node overlaps\n    -   distances between topological neighbor nodes\n    -   total drawing area\n    -   edge bends\n-   maximize \n    -   angular distance between different edges\n    -   aspect ratio disparities\n-   emphasize symmetry\n    -   similar graph structures should look similar in layout\n\n:::\n\n::: {.column width=\"40%\"}\n![](nodelinklayout.png)\n:::\n:::\n\n## NODE-LINK CHALLENGES\n\n**Many criteria directly conflict with each other.**\n\n\n![](nodeconflict.png)\n\n## OPTIMIZATION BASED LAYOUTS {.smaller}\n\n-   formulate layout problem as optimization problem\n-   convert criteria into weighted cost function \n    -   F(layout) = a*[crossing counts] + b*[drawing space used]+...\n-   use known optimization techniques to find layout at minimal cost\n    -   energy-based physics models\n    -   force-directed placement\n    -   spring embedders\n\n## FORCE DIRECTED PLACEMENT {.smaller}\n::: columns \n::: {.column width=\"60%\"}\n-   physics model\n    -   links = springs pull together\n    -   nodes = magnets repulse apart\n\n-   algorithm\n    -   place vertices in random locations\n    -   while not equilibrium\n    -   calculate force on vertex as sum of\n        -   pairwise repulsion of all nodes\n        -   attraction between connected nodes\n    -   move vertex by c * vertex_force\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](force.png)\n:::\n:::\n\n## FORCE DIRECTED PROS/CONS {.smaller}\n::: columns\n::: {.column width=\"60%\"}\n-   strengths\n    -   reasonable layout for small, sparse graphs\n    -   clusters typically visible\n    -   edge length uniformity\n-   weaknesses\n    -   nondeterministic\n    -   computationally expensive: O(n^3) for n nodes\n        -   each step is n^2, takes ~n cycles to reach equilibrium\n    -   naive FD doesn't scale well beyond 1K nodes \n    -   iterative progress: engaging but distracting\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](fdimage.png)\n\n:::\n:::\n\n## FORCE DIRECTED IDIOM {.smaller}\n::: columns\n::: {.column width=\"75%\"}\n-   visual encoding\n    -   link connection marks, node point marks\n-   considerations\n    -   spatial position: no meaning directly encoded, eft free to minimize crossings\n    -   proximity semantics?\n        -   sometimes meaningful, sometimes an artifact of layout algorithm\n        -   tension with length (long edges more visually salient than short)\n-   tasks\n    -   explore topology; locate paths, clusters\n-   scalability\n    -   node/edge density E < 4N\n:::\n\n::: {.column width=\"25%\"}\n\n![](fdimage.png)\n\n:::\n:::\n\n## FORCE DIRECTED EXAMPLES\n\n[Force Directed Graph](https://observablehq.com/@d3/force-directed-graph)\n\n[Disjoint Force Directed](https://observablehq.com/@d3/disjoint-force-directed-graph)\n\n[OBSERVABLE D3 LIBRARY](https://observablehq.com/@d3/gallery?collection=@observablehq/observable-libraries-for-visualization)\n\n## CIRCULAR LAYOUTS / ARC DIAGRAMS {.smaller}\n\n-   restricted node-link layouts: lay out nodes around circle or along line\n-   data\n    -   original: network\n    -   derived: node ordering attribute (global computation)\n-   considerations: node ordering crucial to avoid excessive clutter from edge crossings\n    -   examples: before & after barycentric ordering\n\n[Arc Diagram](https://observablehq.com/@d3/arc-diagram)\n\n\n## ADJACENCY MATRIX\n\nMatrix derived from network\n\n::: columns\n::: {.column width=\"40%\"}\n![](adjacency.png)\n\n![](adjex1.png)\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](adjex2.png)\n\n:::\n:::\n\n\n## NODE ORDER\n\n[ANIMATED VERSION](https://bost.ocks.org/mike/miserables/) built with D3 by Mike Bostock.\n\n![](miserables.png)\n\n## MATRIX PROS/CONS\n\nGood for topology tasks related to neighborhoods.  Bad for topology tasks related to paths.\n\n![](adjgoodbad.png)\n\n## NODE-LINK vs MATRIX {.smaller}\n\n-   node-link diagram strengths\n    -   topology understanding, path tracing\n    -   intuitive, flexible, no training needed\n-   adjacency matrix strengths\n    -   focus on edges rather than nodes\n    -   layout straightforward (reordering needed)\n    -   predictability, scalability\n    -   some topology tasks trainable\n-   empirical studies:\n    -   node-link best for small networks\n    -   matrix best for large networks if tasks donâ€™t involve path tracing\n\n## TREES\n\n## NODE-LINK TREES {.smaller}\n\n:::: {.columns}\n::: {.column}\n-   Reingold-Tilford\n    -   tidy drawings of trees\n    -   exploit parent/child structure\n    -   allocate space: compact but without overlap\n    -   rectilinear and radial variants\n    \n[These are COOOOOL!](https://observablehq.com/@d3/gallery?collection=@observablehq/observable-libraries-for-visualization)\n:::\n\n::: {.column}\n![](trees1.png)\n\n\n\n:::\n::::\n\n\n## RADIAL NODE-LINK TREE {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-   data\n    -   tree\n-   encoding\n    -   link connection marks\n    -   point node marks\n    -   radial axis orientation\n        -   angular proximity: siblings\n        -   distance from center: depth in tree \n-   tasks\n    -   understanding topology,  following paths\n-   scalability\n    -   1K - 10K nodes (with/without labels)\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](radial.png)\n[EXAMPLE](https://observablehq.com/@esperanc/d3-radial-tidy-tree)\n\n:::\n:::\n\n## CONNECTION AND CONTAINMENT {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-   marks as links (vs. nodes)\n    -   common case in network drawing\n    -   1D case: connection\n        -   ex: all node-link diagrams\n        -   emphasizes topology, path tracing\n        -   networks and trees\n    -   2D case: containment\n        -   ex: all treemap variants\n        -   emphasizes attribute values at leaves (size coding)\n        -   only trees\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](connect.png)\n\n:::\n:::\n\n## TREEMAP {.smaller}\n\n\n::: columns\n::: {.column width=\"60%\"}\n-   data\n    -   tree\n    -   1 quant attrib at leaf nodes\n-   encoding\n    -   area containment marks for hierarchical structure\n    -   rectilinear orientation\n    -   size encodes quant attrib\n-   tasks\n    -   query attribute at leaf nodes\n    -   ex: disk space usage within filesystem\n-   scalability\n    -   1M leaf nodes\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](enclose.png)\n\n\n[TREEMAP](https://observablehq.com/@d3/treemap)\n\n[VORONOI TREEMAP](https://observablehq.com/@will-r-chase/voronoi-treemap)\n\n\n:::\n:::\n\n## IMPLICIT TREE LAYOUTS {.smaller}\n\nAn alternative to connection and containment is position.  These show parent-child relationships only through relative positions.\n\n![](implicit.png)\n\n![](implicit2.png){height=100}\n\n\n## TREE IDIOMS {.smaller}\n\n\n\n::: columns\n::: {.column width=\"60%\"}\n-   data shown\n    -   link relationships \n    -   tree depth\n    -   sibling order\n-   design choices\n    -   connection vs containment link marks\n    -   rectilinear vs radial layout\n    -   spatial position channels\n-   considerations\n    -   redundant? arbitrary?\n    -   information density?\n        -   avoid wasting space\n        -   consider where to fit labels!\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](trees.png)\n\n\n\n\n:::\n:::\n\n## ARRANGE NETWORKS/TREES\n\n![](Arrangenet.png)","srcMarkdownNoYaml":"\n\n\n## DATASET TYPES: NETWORKS\n\n::: columns\n::: {.r-fit-text .column width=\"40%\"}\n-   networks (also called graphs)\n    -   model relationships between things\n    -   two kinds of items, both can have attributes\n        -   nodes\n        -   links\n-   trees are a special case\n    -   no cycles\n    -   one parent per node\n\n:::\n\n::: {.column width=\"60%\"}\n![](Networks.png)\n:::\n:::\n## ARRANGE NETWORKS/TREES\n\n![](Arrangenet.png)\n\n\n## NETWORK TASKS\n\n::: columns\n::: {.r-fit-text .column width=\"60%\"}\n-   topology based tasks\n    -   find paths\n    -   find (topological) neighbors\n    -   compare centrality/importance measures\n    -   identify clusters / communities\n-   attribute based tasks (similar to tabular data)\n    -   find distributions, etc...\n-   combination tasks, incorporating both\n    -   example: find friends-of-friends who like cats \n        -   topology: find all adjacent nodes of given node\n        -   attributes: check if has-pet (node attribute) == cat\n\n\n:::\n\n::: {.column width=\"40%\"}\n![](Nettasks.png)\n:::\n:::\n\n## NODE-LINK DIAGRAMS\n\n::: columns\n::: {.r-fit-text .column width=\"40%\"}\n-   nodes: point marks\n-   links: line marks\n    -   straight lines or arcs\n    -   connections between nodes\n-   intuitive & familiar\n    -   most common\n    -   many, many variants\n\n\n:::\n\n::: {.column width=\"60%\"}\n![](nodelink.png)\n:::\n:::\n\n## NODE-LINK LAYOUT {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-   minimize \n    -   edge crossings, node overlaps\n    -   distances between topological neighbor nodes\n    -   total drawing area\n    -   edge bends\n-   maximize \n    -   angular distance between different edges\n    -   aspect ratio disparities\n-   emphasize symmetry\n    -   similar graph structures should look similar in layout\n\n:::\n\n::: {.column width=\"40%\"}\n![](nodelinklayout.png)\n:::\n:::\n\n## NODE-LINK CHALLENGES\n\n**Many criteria directly conflict with each other.**\n\n\n![](nodeconflict.png)\n\n## OPTIMIZATION BASED LAYOUTS {.smaller}\n\n-   formulate layout problem as optimization problem\n-   convert criteria into weighted cost function \n    -   F(layout) = a*[crossing counts] + b*[drawing space used]+...\n-   use known optimization techniques to find layout at minimal cost\n    -   energy-based physics models\n    -   force-directed placement\n    -   spring embedders\n\n## FORCE DIRECTED PLACEMENT {.smaller}\n::: columns \n::: {.column width=\"60%\"}\n-   physics model\n    -   links = springs pull together\n    -   nodes = magnets repulse apart\n\n-   algorithm\n    -   place vertices in random locations\n    -   while not equilibrium\n    -   calculate force on vertex as sum of\n        -   pairwise repulsion of all nodes\n        -   attraction between connected nodes\n    -   move vertex by c * vertex_force\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](force.png)\n:::\n:::\n\n## FORCE DIRECTED PROS/CONS {.smaller}\n::: columns\n::: {.column width=\"60%\"}\n-   strengths\n    -   reasonable layout for small, sparse graphs\n    -   clusters typically visible\n    -   edge length uniformity\n-   weaknesses\n    -   nondeterministic\n    -   computationally expensive: O(n^3) for n nodes\n        -   each step is n^2, takes ~n cycles to reach equilibrium\n    -   naive FD doesn't scale well beyond 1K nodes \n    -   iterative progress: engaging but distracting\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](fdimage.png)\n\n:::\n:::\n\n## FORCE DIRECTED IDIOM {.smaller}\n::: columns\n::: {.column width=\"75%\"}\n-   visual encoding\n    -   link connection marks, node point marks\n-   considerations\n    -   spatial position: no meaning directly encoded, eft free to minimize crossings\n    -   proximity semantics?\n        -   sometimes meaningful, sometimes an artifact of layout algorithm\n        -   tension with length (long edges more visually salient than short)\n-   tasks\n    -   explore topology; locate paths, clusters\n-   scalability\n    -   node/edge density E < 4N\n:::\n\n::: {.column width=\"25%\"}\n\n![](fdimage.png)\n\n:::\n:::\n\n## FORCE DIRECTED EXAMPLES\n\n[Force Directed Graph](https://observablehq.com/@d3/force-directed-graph)\n\n[Disjoint Force Directed](https://observablehq.com/@d3/disjoint-force-directed-graph)\n\n[OBSERVABLE D3 LIBRARY](https://observablehq.com/@d3/gallery?collection=@observablehq/observable-libraries-for-visualization)\n\n## CIRCULAR LAYOUTS / ARC DIAGRAMS {.smaller}\n\n-   restricted node-link layouts: lay out nodes around circle or along line\n-   data\n    -   original: network\n    -   derived: node ordering attribute (global computation)\n-   considerations: node ordering crucial to avoid excessive clutter from edge crossings\n    -   examples: before & after barycentric ordering\n\n[Arc Diagram](https://observablehq.com/@d3/arc-diagram)\n\n\n## ADJACENCY MATRIX\n\nMatrix derived from network\n\n::: columns\n::: {.column width=\"40%\"}\n![](adjacency.png)\n\n![](adjex1.png)\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](adjex2.png)\n\n:::\n:::\n\n\n## NODE ORDER\n\n[ANIMATED VERSION](https://bost.ocks.org/mike/miserables/) built with D3 by Mike Bostock.\n\n![](miserables.png)\n\n## MATRIX PROS/CONS\n\nGood for topology tasks related to neighborhoods.  Bad for topology tasks related to paths.\n\n![](adjgoodbad.png)\n\n## NODE-LINK vs MATRIX {.smaller}\n\n-   node-link diagram strengths\n    -   topology understanding, path tracing\n    -   intuitive, flexible, no training needed\n-   adjacency matrix strengths\n    -   focus on edges rather than nodes\n    -   layout straightforward (reordering needed)\n    -   predictability, scalability\n    -   some topology tasks trainable\n-   empirical studies:\n    -   node-link best for small networks\n    -   matrix best for large networks if tasks donâ€™t involve path tracing\n\n## TREES\n\n## NODE-LINK TREES {.smaller}\n\n:::: {.columns}\n::: {.column}\n-   Reingold-Tilford\n    -   tidy drawings of trees\n    -   exploit parent/child structure\n    -   allocate space: compact but without overlap\n    -   rectilinear and radial variants\n    \n[These are COOOOOL!](https://observablehq.com/@d3/gallery?collection=@observablehq/observable-libraries-for-visualization)\n:::\n\n::: {.column}\n![](trees1.png)\n\n\n\n:::\n::::\n\n\n## RADIAL NODE-LINK TREE {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-   data\n    -   tree\n-   encoding\n    -   link connection marks\n    -   point node marks\n    -   radial axis orientation\n        -   angular proximity: siblings\n        -   distance from center: depth in tree \n-   tasks\n    -   understanding topology,  following paths\n-   scalability\n    -   1K - 10K nodes (with/without labels)\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](radial.png)\n[EXAMPLE](https://observablehq.com/@esperanc/d3-radial-tidy-tree)\n\n:::\n:::\n\n## CONNECTION AND CONTAINMENT {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-   marks as links (vs. nodes)\n    -   common case in network drawing\n    -   1D case: connection\n        -   ex: all node-link diagrams\n        -   emphasizes topology, path tracing\n        -   networks and trees\n    -   2D case: containment\n        -   ex: all treemap variants\n        -   emphasizes attribute values at leaves (size coding)\n        -   only trees\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](connect.png)\n\n:::\n:::\n\n## TREEMAP {.smaller}\n\n\n::: columns\n::: {.column width=\"60%\"}\n-   data\n    -   tree\n    -   1 quant attrib at leaf nodes\n-   encoding\n    -   area containment marks for hierarchical structure\n    -   rectilinear orientation\n    -   size encodes quant attrib\n-   tasks\n    -   query attribute at leaf nodes\n    -   ex: disk space usage within filesystem\n-   scalability\n    -   1M leaf nodes\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](enclose.png)\n\n\n[TREEMAP](https://observablehq.com/@d3/treemap)\n\n[VORONOI TREEMAP](https://observablehq.com/@will-r-chase/voronoi-treemap)\n\n\n:::\n:::\n\n## IMPLICIT TREE LAYOUTS {.smaller}\n\nAn alternative to connection and containment is position.  These show parent-child relationships only through relative positions.\n\n![](implicit.png)\n\n![](implicit2.png){height=100}\n\n\n## TREE IDIOMS {.smaller}\n\n\n\n::: columns\n::: {.column width=\"60%\"}\n-   data shown\n    -   link relationships \n    -   tree depth\n    -   sibling order\n-   design choices\n    -   connection vs containment link marks\n    -   rectilinear vs radial layout\n    -   spatial position channels\n-   considerations\n    -   redundant? arbitrary?\n    -   information density?\n        -   avoid wasting space\n        -   consider where to fit labels!\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n![](trees.png)\n\n\n\n\n:::\n:::\n\n## ARRANGE NETWORKS/TREES\n\n![](Arrangenet.png)"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","css":["styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.450","auto-stretch":true,"title-block-banner":true,"title":"LECTURE 8 - Network Data","author":"Barrie Robison","date":"2023-04-17","categories":["Lecture","DataViz","Data","Network","Observable"],"image":"Azathothnetwork.png","draft":true,"slideNumber":true,"chalkboard":{"buttons":false},"previewLinks":"auto","footer":"<a href=\"https://canvas.uidaho.edu/courses/17806\" target=\"_blank\">CANVAS</a>...<a href=\"https://professorpolymorphic.github.io/RobisonWebSite/BCB520/BCB520.html\" target=\"_blank\">HOME</a>","theme":["default","custom.scss"]}}},"projectFormats":["html"]}