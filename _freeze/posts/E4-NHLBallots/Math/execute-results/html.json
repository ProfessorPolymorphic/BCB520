{
  "hash": "370ae81705656a73595f0350c9dee134",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Math\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(pheatmap)\nlibrary(RColorBrewer)\n```\n:::\n\n\nMartin Necas\nMartin Necas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njustice<- read_excel(\"justice.xlsx\")%>%\n  mutate(Voter = \"Justice\")\nBarrie<- read_excel(\"Barrie.xlsx\")\nBetsy <- read_excel(\"BetsyChurchHockeyBallot.xlsx\")%>%\n  rename(\n         Player = `Player Name` )%>%\n  rename(Rank = `Nomination position`)%>%\n  rename(Voter = Name)\nClaire <- read.csv(\"Hockey_Ranking_CS.csv\")\nIan<- read_excel(\"IAN HOCKEY NOMINATIONS.xlsx\")%>%\n  rename(Award = Trophy)\nJohn <- read.csv(\"JohnCambareriHockeyAwards.csv\")%>%\n  rename(Rank = Place)%>%\n  mutate(Voter = \"John\")\nMarwa <- read_excel(\"Marwa.xlsx\")\nHenry <- read_excel(\"NHL award ballot HT.xlsx\")\nPriya <- read_excel(\"NHL_Award_Ballet.xlsx\")%>%\n  mutate(Voter = \"Priya\")%>%\n  pivot_longer(\n    cols = c(VEZINA, HART, `JAMES NORRIS`, CALDER, `FRANK J SELKE`, `LADY BING`),\n    names_to = \"Award\",\n    values_to = \"Player\"\n  )%>%\n  select(-Voters)\nSharon <- readRDS(\"sharon_ballot.rds\")\n\nAll_Votes <- bind_rows(Barrie, Sharon, Betsy, Claire, Henry, Ian, John, justice, Marwa, Priya)%>%\n  mutate(\n    Award.Standard = case_when(\n      str_detect(Award, \"(?i)Norris\") ~ \"Norris\",\n      str_detect(Award, \"(?i)Byng\") ~ \"Byng\",\n      str_detect(Award, \"(?i)Selk\") ~ \"Selke\",\n      str_detect(Award, \"(?i)Calder\") ~ \"Calder\",\n      str_detect(Award, \"(?i)Vezina\") ~ \"Vezina\",\n      str_detect(Award, \"(?i)Hart\") ~ \"Hart\",\n       str_detect(Award, \"(?i)Lady\") ~ \"Byng\",\n      str_detect(Award, \"(?i)Heart\") ~ \"Hart\",\n      TRUE ~ \"Other\"\n    ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add this improved cleaning function before creating the Scores data frame\nstandardize_player_names <- function(name) {\n  # Convert to character if not already\n  name <- as.character(name)\n  # Remove leading/trailing whitespace\n  name <- str_trim(name)\n  # Replace multiple spaces with a single space\n  name <- str_replace_all(name, \"\\\\s+\", \" \")\n  # Standardize capitalization\n  name <- str_to_title(name)\n  # Remove accents (requires stringi package)\n  if (!requireNamespace(\"stringi\", quietly = TRUE)) {\n    install.packages(\"stringi\")\n  }\n  name <- stringi::stri_trans_general(name, \"Latin-ASCII\")\n  # Handle specific cases like missing spaces\n  name <- str_replace(name, \"Martinnecas\", \"Martin Necas\")\n  return(name)\n}\n\n# Apply the improved cleaning in your data processing\nAll_Votes <- All_Votes %>%\n  mutate(\n    Player = standardize_player_names(Player)\n  ) %>%\n  mutate(\n    Score = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1,\n      TRUE ~ 0\n    )\n  )\n\n# Then continue with your grouping and summarizing\nScores <- All_Votes %>%\n  group_by(Award.Standard, Player) %>%\n  summarize(Total = sum(Score), .groups = \"drop\")\n\n# Debug duplicates (optional)\nduplicates <- Scores %>%\n  filter(Award.Standard == \"Byng\") %>%\n  group_by(Player) %>%\n  filter(n() > 1)\n\nif(nrow(duplicates) > 0) {\n  print(\"Found duplicates:\")\n  print(duplicates)\n}\n\nggplot(Scores, aes(x = reorder(Player, Total), y = Total)) +\n  geom_col(fill = \"#3182bd\") +  # Use a pleasing blue color\n  coord_flip() +\n  facet_wrap(~Award.Standard, scales = \"free_y\") +  # Note: 'scales' not 'scale'\n  labs(\n    title = \"NHL Award Voting Results\",\n    subtitle = \"Players ranked by total vote score in each award category\",\n    x = \"Player\",\n    y = \"Total Vote Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.background = element_rect(fill = \"#f0f0f0\"),\n    strip.text = element_text(face = \"bold\", size = 12),\n    axis.text.y = element_text(size = 9),\n    panel.spacing = unit(1, \"lines\")\n  )\n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# If you want to focus on top players only in each category\n# to prevent plots from becoming too cluttered\ntop_n_players <- 10\n\nScores_top <- Scores %>%\n  group_by(Award.Standard) %>%\n  slice_max(order_by = Total, n = top_n_players) %>%\n  ungroup()\n\nggplot(Scores_top, aes(x = reorder(Player, Total), y = Total)) +\n  geom_col(fill = \"#3182bd\") +\n  coord_flip() +\n  facet_wrap(~Award.Standard, scales = \"free_y\") +\n  labs(\n    title = \"NHL Award Voting Results\",\n    subtitle = paste0(\"Top \", top_n_players, \" players by vote score in each award category\"),\n    x = \"Player\",\n    y = \"Total Vote Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.background = element_rect(fill = \"#f0f0f0\"),\n    strip.text = element_text(face = \"bold\", size = 12),\n    axis.text.y = element_text(size = 9),\n    panel.spacing = unit(1, \"lines\")\n  )\n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply the standardization function to ensure consistent player names\nAll_Votes <- All_Votes %>%\n  mutate(\n    Player = standardize_player_names(Player)\n  ) %>%\n  mutate(\n    Score = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1,\n      TRUE ~ 0\n    )\n  )\n\n# Calculate scores with consistent player names\nScores <- All_Votes %>%\n  group_by(Award.Standard, Player) %>%\n  summarize(Total = sum(Score), .groups = \"drop\")\n\n# Get list of all awards\nawards <- unique(Scores$Award.Standard)\n\n# Function to create a plot for a single award\ncreate_award_plot <- function(award_name) {\n  award_data <- Scores %>% \n    filter(Award.Standard == award_name)\n  \n  # If there's no data for this award, return NULL\n  if(nrow(award_data) == 0) return(NULL)\n  \n  # Create the plot\n  p <- ggplot(award_data, aes(x = reorder(Player, Total), y = Total)) +\n    geom_col(fill = \"#3182bd\") +\n    coord_flip() +\n    labs(\n      title = paste(award_name, \"Trophy Voting Results\"),\n      x = \"Player\",\n      y = \"Total Vote Score\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\"),\n      axis.text.y = element_text(size = 10)\n    )\n  \n  return(p)\n}\n\n# Create a list to store all the plots\naward_plots <- list()\n\n# Generate a plot for each award\nfor(award in awards) {\n  award_plots[[award]] <- create_award_plot(award)\n}\n\n# Display each plot (in a non-loop environment like RStudio, \n# you would typically view these one at a time)\n# In R Markdown, you can include each plot separately\n\n# Example of how to display a specific award plot:\naward_plots[[\"Hart\"]] \n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\naward_plots[[\"Norris\"]] \n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\naward_plots[[\"Vezina\"]] \n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n\n```{.r .cell-code}\naward_plots[[\"Byng\"]] \n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-4-4.png){width=672}\n:::\n\n```{.r .cell-code}\naward_plots[[\"Calder\"]] \n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-4-5.png){width=672}\n:::\n\n```{.r .cell-code}\naward_plots[[\"Selke\"]] # Display the Hart Trophy plot\n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-4-6.png){width=672}\n:::\n\n```{.r .cell-code}\n# To save all plots to files\nfor(award in awards) {\n  if(!is.null(award_plots[[award]])) {\n    filename <- paste0(\"NHL_\", award, \"_Award_Votes.png\")\n    ggsave(\n      filename = filename,\n      plot = award_plots[[award]],\n      width = 6,\n      height = 8,\n      dpi = 300\n    )\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a single matrix combining all awards\nall_votes_wide <- All_Votes %>%\n  # Create player-award combinations\n  mutate(PlayerAward = paste(Player, Award, sep = \" - \")) %>%\n  select(Voter, PlayerAward, Score) %>%\n  pivot_wider(\n    names_from = Voter,\n    values_from = Score,\n    values_fill = list(Score = 0)\n  ) %>%\n  column_to_rownames(\"PlayerAward\")\n\n# Plot the combined heatmap with clustering\nheat<-pheatmap(\n  all_votes_wide,\n  main = \"Clustered NHL Award Voting Patterns\",\n  color = colorRampPalette(brewer.pal(9, \"Blues\"))(50),\n  cluster_rows = FALSE,\n  cluster_cols = TRUE,\n  display_numbers = FALSE,\n  number_color = \"black\",\n  fontsize_number = 7,\n  fontsize = 4,\n  angle_col = 45,\n  height = 20,\n  width = 10\n)\n```\n\n::: {.cell-output-display}\n![](Math_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\npng(filename = \"heatmap.png\", width = 1000, height = 1500, res = 200)\nheat\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n:::\n\n\n\n![](heatmap.png)\n",
    "supporting": [
      "Math_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}