{
  "hash": "0c1a92680db73f6591226352ea638431",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Music\"\nformat: html\neval: false\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(mapdata)\nlibrary(viridis)\n\nperformances <- fromJSON(\"miranda.json\")\n# But for this example, let's create a tibble with the data\n\n# Define a function to clean location data\nclean_location <- function(location) {\n  # Handle NA or empty values\n  if (is.na(location) || location == \"\") {\n    return(list(city = NA_character_, region = NA_character_, country = NA_character_))\n  }\n  \n  # Extract city and state/country\n  if (grepl(\"Moscow, Idaho\", location)) {\n    return(list(city = \"Moscow\", region = \"Idaho\", country = \"USA\"))\n  } else if (grepl(\"University of Idaho\", location)) {\n    return(list(city = \"Moscow\", region = \"Idaho\", country = \"USA\"))\n  } else if (grepl(\"Costa Rica\", location)) {\n    city <- sub(\",.+$\", \"\", location)\n    city <- sub(\".+, \", \"\", city)\n    return(list(city = city, region = NA_character_, country = \"Costa Rica\"))\n  } else if (grepl(\"New Zealand\", location)) {\n    city <- \"Wellington\"\n    return(list(city = city, region = NA_character_, country = \"New Zealand\"))\n  } else if (grepl(\"Spain\", location)) {\n    city <- sub(\", Spain\", \"\", location)\n    return(list(city = city, region = NA_character_, country = \"Spain\"))\n  } else if (grepl(\"France\", location)) {\n    city <- sub(\", France\", \"\", location)\n    return(list(city = city, region = NA_character_, country = \"France\"))\n  } else if (grepl(\", UT\", location) || grepl(\"Utah\", location)) {\n    city <- sub(\", UT.*\", \"\", location)\n    city <- sub(\".+, \", \"\", city)\n    return(list(city = city, region = \"Utah\", country = \"USA\"))\n  } else if (grepl(\", WA\", location) || grepl(\"Washington\", location)) {\n    city <- sub(\", WA.*\", \"\", location)\n    city <- sub(\".+, \", \"\", city)\n    return(list(city = city, region = \"Washington\", country = \"USA\"))\n  } else if (grepl(\"Montana\", location)) {\n    city <- \"Red Lodge\"\n    return(list(city = \"Red Lodge\", region = \"Montana\", country = \"USA\"))\n  } else if (grepl(\"Wisconsin\", location)) {\n    city <- sub(\"University of Wisconsin-\", \"\", location)\n    return(list(city = city, region = \"Wisconsin\", country = \"USA\"))\n  } else {\n    return(list(city = NA_character_, region = NA_character_, country = NA_character_))\n  }\n}\n\n\n performances <- fromJSON(\"miranda.json\")\n\n# Process the location data\nperformances_processed <- performances %>%\n  rowwise() %>%\n  mutate(\n    year = if(!is.na(Date)) year(mdy(Date)) else NA_integer_,\n    location_cleaned = list(clean_location(Location)),\n    city = location_cleaned$city,\n    region = location_cleaned$region,\n    country = location_cleaned$country\n  ) %>%\n  ungroup()\n\n# 1. Basic count of performances by location\nlocation_counts <- performances_processed %>%\n  count(Location, sort = TRUE)\n\n# Print top locations\nprint(\"Top performance locations:\")\nprint(head(location_counts, 10))\n\n# 2. Count of performances by country\ncountry_counts <- performances_processed %>%\n  count(country, sort = TRUE)\n\n# Create a bar chart of performances by country\nggplot(country_counts, aes(x = reorder(country, n), y = n, fill = country)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(\n    title = \"Number of Performances by Country\",\n    x = \"Country\",\n    y = \"Number of Performances\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# 3. For a full dataset, visualize performance frequency over time by country\nperformances_by_year_country <- performances_processed %>%\n  count(year, country) %>%\n  filter(!is.na(country))\n\nggplot(performances_by_year_country, aes(x = year, y = n, fill = country)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(\n    title = \"Performances by Year and Country\",\n    x = \"Year\",\n    y = \"Number of Performances\"\n  ) +\n  theme_minimal() +\n  scale_fill_viridis_d()\n\n# 4. Map visualization (for a more complete dataset)\n# Note: This would work better with the full dataset and with proper geocoding\n\n# For US performances, you could create a state-level map\nus_performances <- performances_processed %>%\n  filter(country == \"USA\") %>%\n  count(region, sort = TRUE)\n\n# Get US state map data\nstates_map <- map_data(\"state\")\n\n# Lowercase state names for joining\nus_performances <- us_performances %>%\n  mutate(region_lower = tolower(region))\n\n# Create the map\nggplot() +\n  geom_map(\n    data = states_map, map = states_map,\n    aes(map_id = region, x = long, y = lat),\n    fill = \"white\", color = \"#7f7f7f\", size = 0.2\n  ) +\n  geom_map(\n    data = us_performances, map = states_map,\n    aes(map_id = region_lower, fill = n),\n    color = \"#7f7f7f\", size = 0.2\n  ) +\n  scale_fill_viridis_c(option = \"magma\", direction = -1) +\n  labs(\n    title = \"Performances Across US States\",\n    fill = \"Number of\\nPerformances\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank()\n  )\n\n# 5. Analysis of performance types by location\n# Example: Duo vs. Chamber recitals by country\n\n# Function to categorize performance types\ncategorize_performance <- function(title) {\n  if (grepl(\"Duo recital|Duo Recital\", title)) {\n    return(\"Duo\")\n  } else if (grepl(\"Chamber recital|Chamber Recital\", title)) {\n    return(\"Chamber\")\n  } else if (grepl(\"solo recital|Solo recital\", title)) {\n    return(\"Solo\")\n  } else if (grepl(\"Bach Festival\", title)) {\n    return(\"Bach Festival\")\n  } else if (grepl(\"symphony|Symphony|Concerto\", title)) {\n    return(\"Orchestral\")\n  } else {\n    return(\"Other\")\n  }\n}\n\n# Add performance type\nperformances_processed <- performances_processed %>%\n  mutate(performance_type = map_chr(Title, categorize_performance))\n\n# Performance types by country\nperformance_types_by_country <- performances_processed %>%\n  count(country, performance_type) %>%\n  filter(!is.na(country), !is.na(performance_type))\n\n# Plot\nggplot(performance_types_by_country, aes(x = country, y = n, fill = performance_type)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Performance Types by Country\",\n    x = \"Country\",\n    y = \"Number of Performances\",\n    fill = \"Performance Type\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_brewer(palette = \"Set2\")\n\n# 6. Network analysis of collaborators\n# This would require extracting collaborator names from the Title field\n# Example:\ncollaborator_pattern <- \"with\\\\s+([A-Za-z\\\\s]+)\\\\s+\\\\(([a-z]+)\\\\)\"\n\nextract_collaborators <- function(title) {\n  matches <- str_match_all(title, collaborator_pattern)\n  if (length(matches[[1]]) > 0) {\n    return(matches[[1]][, 2])  # Return collaborator names\n  } else {\n    return(NA_character_)\n  }\n}\n\n# This is a simplified example - would need more sophisticated regex for full analysis\nperformances_processed <- performances_processed %>%\n  mutate(collaborators = map(Title, extract_collaborators))\n\n# Filter for performances with identified collaborators\ncollaboration_data <- performances_processed %>%\n  filter(!is.na(collaborators)) %>%\n  unnest(collaborators) %>%\n  count(collaborators, sort = TRUE)\n\n# Print top collaborators\nprint(\"Top collaborators:\")\nprint(head(collaboration_data, 5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(mapdata)\nlibrary(sf)\nlibrary(rnaturalearthdata)\nlibrary(rnaturalearth)\n\n# Add coordinates for known performance locations\n# In a real implementation, you would use geocoding, but we'll use a manual approach here\nperformance_locations <- tribble(\n  ~city, ~region, ~country, ~lat, ~lon,\n  \"Moscow\", \"Idaho\", \"USA\", 46.7324, -117.0002,\n  \"Provo\", \"Utah\", \"USA\", 40.2338, -111.6585,\n  \"Wenatchee\", \"Washington\", \"USA\", 47.4235, -120.3103,\n  \"Spokane\", \"Washington\", \"USA\", 47.6588, -117.4260,\n  \"Sandpoint\", \"Idaho\", \"USA\", 48.2766, -116.5534,\n  \"Red Lodge\", \"Montana\", \"USA\", 45.1858, -109.2471,\n  \"Whitewater\", \"Wisconsin\", \"USA\", 42.8336, -88.7323,\n  \"Cottonwood\", \"Idaho\", \"USA\", 46.0513, -116.3510,\n  \"Oshkosh\", \"Wisconsin\", \"USA\", 44.0247, -88.5426,\n  \"Ellensburg\", \"Washington\", \"USA\", 46.9965, -120.5478,\n  \"Wellington\", NA, \"New Zealand\", -41.2924, 174.7787,\n  \"Limón\", NA, \"Costa Rica\", 9.9909, -83.0416,\n  \"Heredia\", NA, \"Costa Rica\", 10.0028, -84.1171,\n  \"Moravia\", NA, \"Costa Rica\", 9.9607, -84.0577,\n  \"Santo Domingo\", NA, \"Costa Rica\", 9.9833, -84.0833,\n  \"Manresa\", NA, \"Spain\", 41.7286, 1.8399,\n  \"Sant Feliu\", NA, \"Spain\", 41.3860, 2.0437,\n  \"Saint-Raphaël\", NA, \"France\", 43.4259, 6.7684\n)\n\n\n\n\n\n# Extract location information based on the location field\nextract_location_info <- function(location) {\n  if (grepl(\"Moscow, Idaho\", location)) {\n    return(list(city = \"Moscow\", region = \"Idaho\", country = \"USA\"))\n  } else if (grepl(\"Provo, UT\", location)) {\n    return(list(city = \"Provo\", region = \"Utah\", country = \"USA\"))\n  } else if (grepl(\"Wenatchee, WA\", location)) {\n    return(list(city = \"Wenatchee\", region = \"Washington\", country = \"USA\"))\n  } else if (grepl(\"Spokane\", location)) {\n    return(list(city = \"Spokane\", region = \"Washington\", country = \"USA\"))\n  } else if (grepl(\"Sandpoint\", location)) {\n    return(list(city = \"Sandpoint\", region = \"Idaho\", country = \"USA\"))\n  } else if (grepl(\"Red Lodge\", location)) {\n    return(list(city = \"Red Lodge\", region = \"Montana\", country = \"USA\"))\n  } else if (grepl(\"Wisconsin-Whitewater\", location)) {\n    return(list(city = \"Whitewater\", region = \"Wisconsin\", country = \"USA\"))\n  } else if (grepl(\"Wisconsin-Oshkosh\", location)) {\n    return(list(city = \"Oshkosh\", region = \"Wisconsin\", country = \"USA\"))\n  } else if (grepl(\"Cottonwood\", location)) {\n    return(list(city = \"Cottonwood\", region = \"Idaho\", country = \"USA\"))\n  } else if (grepl(\"Ellensburg\", location)) {\n    return(list(city = \"Ellensburg\", region = \"Washington\", country = \"USA\"))\n  } else if (grepl(\"Costa Rica\", location)) {\n    if (grepl(\"Limón\", location)) {\n      return(list(city = \"Limón\", region = NA, country = \"Costa Rica\"))\n    } else if (grepl(\"Heredia\", location)) {\n      return(list(city = \"Heredia\", region = NA, country = \"Costa Rica\"))\n    } else if (grepl(\"Moravia\", location)) {\n      return(list(city = \"Moravia\", region = NA, country = \"Costa Rica\"))\n    } else if (grepl(\"Santo Domingo\", location)) {\n      return(list(city = \"Santo Domingo\", region = NA, country = \"Costa Rica\"))\n    } else {\n      return(list(city = NA, region = NA, country = \"Costa Rica\"))\n    }\n  } else if (grepl(\"Wellington\", location)) {\n    return(list(city = \"Wellington\", region = NA, country = \"New Zealand\"))\n  } else if (grepl(\"Manresa\", location)) {\n    return(list(city = \"Manresa\", region = NA, country = \"Spain\"))\n  } else if (grepl(\"Sant Feliu\", location)) {\n    return(list(city = \"Sant Feliu\", region = NA, country = \"Spain\"))\n  } else if (grepl(\"Saint-Raphaël\", location)) {\n    return(list(city = \"Saint-Raphaël\", region = NA, country = \"France\"))\n  } else {\n    return(list(city = NA, region = NA, country = NA))\n  }\n}\n\n# Process performances to extract location details\nperformances_processed <- performances %>%\n  rowwise() %>%\n  mutate(\n    location_info = list(extract_location_info(Location)),\n    city = location_info$city,\n    region = location_info$region,\n    country = location_info$country\n  ) %>%\n  ungroup()\n\n# Join with location coordinates\nperformances_with_coords <- performances_processed %>%\n  left_join(performance_locations, by = c(\"city\", \"region\", \"country\"))\n\n# Get world map data\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")%>%\n  filter(name != \"Antarctica\")\n\n# Get US states data for more detailed US map\nstates <- st_as_sf(map(\"state\", plot = FALSE, fill = TRUE))\nstates <- states %>%\n  rename(region = ID) %>%\n  mutate(region = str_to_title(region))\n\n# 1. Create a world map with performance locations\nworld_performances <- ggplot() +\n  geom_sf(data = world, fill = \"#f5f5f5\", color = \"#e0e0e0\") +\n  geom_point(data = performances_with_coords, \n             aes(x = lon, y = lat, color = country, size = 3),\n             alpha = 0.8) +\n  scale_color_viridis_d() +\n  scale_size_identity() +\n  labs(\n    title = \"Professor Wilson's International Performances\",\n   \n    color = \"Country\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_line(color = \"#f0f0f0\"),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank()\n  )\n\n# 2. Create a US map with performance locations\nus_performances <- performances_with_coords %>%\n  filter(country == \"USA\")\n\nus_map <- ggplot() +\n  geom_sf(data = states, fill = \"#f5f5f5\", color = \"#d0d0d0\") +\n  geom_point(data = us_performances, \n             aes(x = lon, y = lat, color = region, size = 3),\n             alpha = 0.8) +\n  scale_color_viridis_d() +\n  scale_size_identity() +\n  coord_sf(xlim = c(-125, -65), ylim = c(25, 50)) +\n  labs(\n    title = \"Professor Wilson's Performances in the United States\",\n  \n    color = \"State\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_line(color = \"#f0f0f0\"),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank()\n  )\n\n# Print both maps\nprint(world_performances)\nprint(us_map)\n\n# For a more interactive approach, you could use leaflet:\n# Uncomment and run this code if you want an interactive map\n# library(leaflet)\n# \n# # Create a color palette for countries\n# country_palette <- colorFactor(palette = \"viridis\", domain = performances_with_coords$country)\n# \n# # Create interactive map\n# interactive_map <- leaflet(performances_with_coords) %>%\n#   addTiles() %>%  # Add default OpenStreetMap tiles\n#   addCircleMarkers(\n#     ~lon, ~lat,\n#     color = ~country_palette(country),\n#     radius = 8,\n#     fillOpacity = 0.8,\n#     popup = ~paste0(\n#       \"<b>\", Title, \"</b><br/>\",\n#       \"Location: \", Location, \"<br/>\",\n#       \"Date: \", Date\n#     )\n#   ) %>%\n#   addLegend(\n#     position = \"bottomright\",\n#     pal = country_palette,\n#     values = ~country,\n#     title = \"Country\"\n#   )\n# \n# interactive_map\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}