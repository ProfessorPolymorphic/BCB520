---
title: "AI Extract"
---



```{r}
library(tidyverse)

# Reading the data
Truth <- read.csv("NSF_Truth.csv")%>%
  mutate(across(everything(), as.character))
Experiment <- read.csv("vision_repead_run.csv")%>%
  mutate(across(everything(), as.character))

gpt3.5<-read.csv("arpan_new_all_extractions2.csv")


# Identifying unique proposal numbers
unique_proposals <- unique(Experiment$VERAS_Proposal_Number)

# Defining text columns
#text_cols <- c("Project_Title", "Principal_Investigator")

# Assuming all columns except 1, 4, and 5 are numeric
all_cols <- colnames(Experiment)
exclude_cols <- colnames(Experiment)[c(1, 31, 32)]
grade_cols <- setdiff(all_cols, exclude_cols)

# Function to grade numeric errors
grade_numeric <- function(estimate, known_value) {
  if (is.na(estimate)) {
    return("not found")
  } else if (estimate == known_value) {
    return(1)
  } else {
    return(0)
  }
}

# Function to check text match
check_text_match <- function(estimate, known_value) {
  if (is.na(estimate)) {
    return("not found")
  } else if (estimate == known_value) {
    return("match")
  } else {
    return("mismatch")
  }
}



# Initialize an empty list to store graded data frames
graded_subsets <- list()

for (proposal in unique_proposals) {
  smallexp <- Experiment %>%
    filter(VERAS_Proposal_Number == proposal) 

  known_values <- Truth %>%
    filter(VERAS_Proposal_Number == proposal) 

  grades <- smallexp  # Create a copy for grading

  
  if (nrow(known_values) == 0) {
    cat("No known values found for proposal:", proposal, "\n")
    next  # Skip to the next iteration of the loop
  }
  # Apply grading/matching here as before...
  


# Text columns matching
for (col in grade_cols) {
  grades[[col]] <- mapply(check_text_match, smallexp[[col]], known_values[[col]])
}

  # Ensure all other columns with potential type mismatches are also converted
  grades <- grades %>%
    mutate(across(everything(), as.character))

  # Store the graded subset
  graded_subsets[[proposal]] <- grades
}

# Now, combining should work without the data type mismatch error
graded_experiment <- bind_rows(graded_subsets)

```


```{r}





grades_exp2 <- graded_experiment %>%
  group_by(temp, VERAS_Proposal_Number) %>%
  mutate(Replicate = row_number()) %>%
  ungroup()%>%
  mutate(name = paste(VERAS_Proposal_Number, "-",temp, "-",Replicate))



# Now, pivot the dataframe while preserving key factors
grades_long <- grades_exp2 %>%
  pivot_longer(cols = -c(VERAS_Proposal_Number, temp, iter, Replicate, name), names_to = "Field", values_to = "Grade")

# Create the heatmap
ggplot(grades_long, aes(x = Field, y = name, fill = Grade)) + 
  geom_tile(color = "white") +   
  scale_fill_manual(values = c("match" = "green", "mismatch" = "red", "not found" = "yellow")) +
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(fill = "Grade", x = "Parameter", y = "Row ID")

# Display the plot
ggsave("grades_heatmap.png", width = 10, height = 20)
```


```{r}

library(ggnewscale)
# Assume `grades_long` is your long-format data ready for plotting
# Assume `color_mapping_temp` and `color_mapping_veras` are predefined color mappings for `temp` and `VERAS_Proposal_Number`
# Create a color mapping for 'temp' values
unique_temps <- unique(grades_exp2$temp)

# Create a color palette function ranging from light blue to red
color_palette <- colorRampPalette(c("lightblue", "red"))

# Use the color palette function to generate colors for the number of unique temperatures
color_mapping_temp <- setNames(color_palette(length(unique_temps)), unique_temps)

# Create a color mapping for 'VERAS_Proposal_Number' values
unique_veras <- unique(grades_exp2$VERAS_Proposal_Number)
color_mapping_veras <- setNames(rainbow(length(unique_veras)), unique_veras)

# Create a legend for 'temp'
temp_legend <- grades_exp2 %>%
  select(name, VERAS_Proposal_Number, temp) %>%
  distinct() %>%
  mutate(color = color_mapping_temp[temp])

# Create a legend for 'VERAS_Proposal_Number'
veras_legend <- grades_exp2 %>%
  select(name, VERAS_Proposal_Number) %>%
  distinct() %>%
  mutate(color = color_mapping_veras[VERAS_Proposal_Number])


grades_long_with_temp <- grades_long %>%
  left_join(temp_legend[, c("name", "temp", "color")], by = c("name", "temp"))

# Now `grades_long_with_temp` contains the color mapping for 'temp'
# Next, merge the `veras_legend` colors into `grades_long_with_temp`
grades_long_with_both_legends <- grades_long_with_temp %>%
  left_join(veras_legend[, c("name", "VERAS_Proposal_Number", "color")], by = c("name", "VERAS_Proposal_Number"))

# Now `grades_long_with_both_legends` contains the color mappings for both 'temp' and 'VERAS_Proposal_Number'
# You might need to rename the color columns to distinguish between them if required
grades_long_with_both_legends <- grades_long_with_both_legends %>%
  rename(temp_color = color.x, veras_color = color.y)

# Base plot with the main heatmap
base_plot <- ggplot(grades_long_with_both_legends, aes(x = Field, y = name, fill = Grade)) + 
  geom_tile(color = "white") +
  scale_fill_manual(values = c("match" = "green", "mismatch" = "red", "not found" = "yellow")) +
  theme_minimal()



# Combine the plots
final_plot <- base_plot + 
  new_scale_fill() +  # Start a new fill scale for the sidebars
  geom_tile(aes(x = -1, y = name, fill = temp_color), width = 0.5)+
  # Add 'temp' legend as a sidebar
  
  
  # Add 'VERAS_Proposal_Number' legend as another sidebar
  geom_tile(aes(x = -2, y = name, fill = veras_color), width = 0.5) +
  
  scale_fill_identity() +  # Use actual color values in 'fill' for the sidebars
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        axis.title.y = element_blank())

# Display the plot
print(final_plot)

# Save the plot
ggsave("grades_heatmap_with_legends.png", plot = final_plot, width = 12, height = 20)




```

```{r}
grade_analysis <- grades_long_with_both_legends%>%
  mutate(score = ifelse(Grade == "match", 1, 0))%>%
  group_by(VERAS_Proposal_Number, temp, Field, Replicate)%>%
  summarize(score=mean(score))

grade_aov <- aov(score~VERAS_Proposal_Number * temp * Field, data = grade_analysis)

summary(grade_aov)

```

```{r}
grade_summary <- grades_long_with_both_legends%>%
  mutate(score = ifelse(Grade == "match", 1, 0))%>%
  group_by(VERAS_Proposal_Number, Field)%>%
  summarize(score=mean(score))%>%
  mutate(name = paste(VERAS_Proposal_Number))

# Base plot with the main heatmap
bad5<- ggplot(grade_summary, aes(x = name, y = Field, fill = score)) + 
  geom_tile(color = "white") +
  geom_text(aes(label = ifelse(score < 1, round(score, 2), "")), color = "white", size = 3) +
  scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5)+
  theme_minimal()+
     theme(axis.text.x = element_blank(),
        axis.ticks.y = element_blank(),
        #axis.text.y = element_blank(),
        axis.title.y = element_blank())
 
 
 ggsave("bad5.png", plot = bad5, width = 5, height = 10)

fullscore <- read.csv("extraction_scores.csv")

fullscorelong <- fullscore %>%
  pivot_longer(cols = -c(VERAS_Proposal_Number, X, model), names_to = "Field", values_to = "Grade")%>%
  mutate(score = (52-Grade)/52)

full52<- ggplot(fullscorelong, aes(x = model, y = Field, fill = score)) + 
  geom_tile(color = "white") +
  geom_text(aes(label = ifelse(score < 1, round(score, 2), "")), color = "white", size = 3) +
  scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5)+
  theme_minimal()+
     theme(axis.text.x = element_blank(),
        axis.ticks.y = element_blank(),
        #axis.text.y = element_blank(),
        axis.title.y = element_blank())
 
 
 ggsave("full52.png", plot = full52, width = 4.4, height = 10)

```

![](full52.png)



Had to correct the Truth data set because of the typo:

Truth:  Collaborative Research: Measuring G with Magnto-Gravitational Trap

Experimental: Collaborative Research: Measuring G with a Magneto-Gravitational Trap

the indirect cost extraction for V201060 appears to be dyslexia.  Truth is $168,976 but extracted is ALL 186976.

```{r}
grade_summary_other <- grades_long_with_both_legends%>%
  filter(Field == "G._Other")%>%
  mutate(score = ifelse(Grade == "match", 1, 0))%>%
  group_by(VERAS_Proposal_Number, temp)%>%
  summarize(score=mean(score))%>%
  mutate(name = paste(VERAS_Proposal_Number, temp))

ggplot(grade_summary_other, aes(x=temp, y = score, group = VERAS_Proposal_Number, 
                                color = VERAS_Proposal_Number))+
         geom_point()+
          geom_line()
```
